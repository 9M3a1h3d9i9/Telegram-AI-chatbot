Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DIVIDE
    LPAREN
    MINUS
    PLUS
    RPAREN
    TIMES

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression + term
Rule 2     expression -> expression - term
Rule 3     expression -> term
Rule 4     term -> term * factor
Rule 5     term -> term / factor
Rule 6     term -> factor
Rule 7     factor -> ( expression )
Rule 8     factor -> NUMBER

Terminals, with rules where they appear

(                    : 7
)                    : 7
*                    : 4
+                    : 1
-                    : 2
/                    : 5
DIVIDE               : 
LPAREN               : 
MINUS                : 
NUMBER               : 8
PLUS                 : 
RPAREN               : 
TIMES                : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 7 0
factor               : 4 5 6
term                 : 1 2 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression + term
    (2) expression -> . expression - term
    (3) expression -> . term
    (4) term -> . term * factor
    (5) term -> . term / factor
    (6) term -> . factor
    (7) factor -> . ( expression )
    (8) factor -> . NUMBER

    (               shift and go to state 4
    NUMBER          shift and go to state 5

    expression                     shift and go to state 1
    term                           shift and go to state 2
    factor                         shift and go to state 3

state 1

    (0) S' -> expression .
    (1) expression -> expression . + term
    (2) expression -> expression . - term

    +               shift and go to state 6
    -               shift and go to state 7


state 2

    (3) expression -> term .
    (4) term -> term . * factor
    (5) term -> term . / factor

    +               reduce using rule 3 (expression -> term .)
    -               reduce using rule 3 (expression -> term .)
    $end            reduce using rule 3 (expression -> term .)
    )               reduce using rule 3 (expression -> term .)
    *               shift and go to state 8
    /               shift and go to state 9


state 3

    (6) term -> factor .

    *               reduce using rule 6 (term -> factor .)
    /               reduce using rule 6 (term -> factor .)
    +               reduce using rule 6 (term -> factor .)
    -               reduce using rule 6 (term -> factor .)
    $end            reduce using rule 6 (term -> factor .)
    )               reduce using rule 6 (term -> factor .)


state 4

    (7) factor -> ( . expression )
    (1) expression -> . expression + term
    (2) expression -> . expression - term
    (3) expression -> . term
    (4) term -> . term * factor
    (5) term -> . term / factor
    (6) term -> . factor
    (7) factor -> . ( expression )
    (8) factor -> . NUMBER

    (               shift and go to state 4
    NUMBER          shift and go to state 5

    expression                     shift and go to state 10
    term                           shift and go to state 2
    factor                         shift and go to state 3

state 5

    (8) factor -> NUMBER .

    *               reduce using rule 8 (factor -> NUMBER .)
    /               reduce using rule 8 (factor -> NUMBER .)
    +               reduce using rule 8 (factor -> NUMBER .)
    -               reduce using rule 8 (factor -> NUMBER .)
    $end            reduce using rule 8 (factor -> NUMBER .)
    )               reduce using rule 8 (factor -> NUMBER .)


state 6

    (1) expression -> expression + . term
    (4) term -> . term * factor
    (5) term -> . term / factor
    (6) term -> . factor
    (7) factor -> . ( expression )
    (8) factor -> . NUMBER

    (               shift and go to state 4
    NUMBER          shift and go to state 5

    term                           shift and go to state 11
    factor                         shift and go to state 3

state 7

    (2) expression -> expression - . term
    (4) term -> . term * factor
    (5) term -> . term / factor
    (6) term -> . factor
    (7) factor -> . ( expression )
    (8) factor -> . NUMBER

    (               shift and go to state 4
    NUMBER          shift and go to state 5

    term                           shift and go to state 12
    factor                         shift and go to state 3

state 8

    (4) term -> term * . factor
    (7) factor -> . ( expression )
    (8) factor -> . NUMBER

    (               shift and go to state 4
    NUMBER          shift and go to state 5

    factor                         shift and go to state 13

state 9

    (5) term -> term / . factor
    (7) factor -> . ( expression )
    (8) factor -> . NUMBER

    (               shift and go to state 4
    NUMBER          shift and go to state 5

    factor                         shift and go to state 14

state 10

    (7) factor -> ( expression . )
    (1) expression -> expression . + term
    (2) expression -> expression . - term

    )               shift and go to state 15
    +               shift and go to state 6
    -               shift and go to state 7


state 11

    (1) expression -> expression + term .
    (4) term -> term . * factor
    (5) term -> term . / factor

    +               reduce using rule 1 (expression -> expression + term .)
    -               reduce using rule 1 (expression -> expression + term .)
    $end            reduce using rule 1 (expression -> expression + term .)
    )               reduce using rule 1 (expression -> expression + term .)
    *               shift and go to state 8
    /               shift and go to state 9


state 12

    (2) expression -> expression - term .
    (4) term -> term . * factor
    (5) term -> term . / factor

    +               reduce using rule 2 (expression -> expression - term .)
    -               reduce using rule 2 (expression -> expression - term .)
    $end            reduce using rule 2 (expression -> expression - term .)
    )               reduce using rule 2 (expression -> expression - term .)
    *               shift and go to state 8
    /               shift and go to state 9


state 13

    (4) term -> term * factor .

    *               reduce using rule 4 (term -> term * factor .)
    /               reduce using rule 4 (term -> term * factor .)
    +               reduce using rule 4 (term -> term * factor .)
    -               reduce using rule 4 (term -> term * factor .)
    $end            reduce using rule 4 (term -> term * factor .)
    )               reduce using rule 4 (term -> term * factor .)


state 14

    (5) term -> term / factor .

    *               reduce using rule 5 (term -> term / factor .)
    /               reduce using rule 5 (term -> term / factor .)
    +               reduce using rule 5 (term -> term / factor .)
    -               reduce using rule 5 (term -> term / factor .)
    $end            reduce using rule 5 (term -> term / factor .)
    )               reduce using rule 5 (term -> term / factor .)


state 15

    (7) factor -> ( expression ) .

    *               reduce using rule 7 (factor -> ( expression ) .)
    /               reduce using rule 7 (factor -> ( expression ) .)
    +               reduce using rule 7 (factor -> ( expression ) .)
    -               reduce using rule 7 (factor -> ( expression ) .)
    $end            reduce using rule 7 (factor -> ( expression ) .)
    )               reduce using rule 7 (factor -> ( expression ) .)

